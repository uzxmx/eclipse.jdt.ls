/*
 * Auto-generated by Frida. Please modify to match the signature of CompilationUnit.codeComplete.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call CompilationUnit.codeComplete.
   *
   * @this {object} - The Java class or instance.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Java method arguments.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onEnter(log, args, state) {
    log(`CompilationUnit.codeComplete(${args.map(JSON.stringify).join(', ')})`);
	  state.start_time = new Date();
	  var JavaThread = Java.use("java.lang.Thread");
	  var th = Java.cast( JavaThread.currentThread(), JavaThread);
	  var stack = th.getStackTrace(), e=null;
		for(var i=0; i<stack.length; i++){
			console.log("\t"+stack[i].getClassName()+"."+stack[i].getMethodName()+"("+stack[i].getFileName()+":" + stack[i].getLineNumber() + ")");
		}
  },

  /**
   * Called synchronously when about to return from CompilationUnit.codeComplete.
   *
   * See onEnter for details.
   *
   * @this {object} - The Java class or instance.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
    if (retval !== undefined) {
      log(`<= ${JSON.stringify(retval)}`);
    }
	  log('CompilationUnit.codeComplete cost time: ' + (new Date() - state.start_time));
  }
}
